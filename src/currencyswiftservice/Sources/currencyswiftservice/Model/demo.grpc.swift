//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: demo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Hipstershop_CartServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_CartServiceService {
  func addItem(_ request: Hipstershop_AddItemRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_AddItemRequest, Hipstershop_Empty>
  func getCart(_ request: Hipstershop_GetCartRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_GetCartRequest, Hipstershop_Cart>
  func emptyCart(_ request: Hipstershop_EmptyCartRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_EmptyCartRequest, Hipstershop_Empty>
}

public final class Hipstershop_CartServiceServiceClient: GRPCClient, Hipstershop_CartServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.CartService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to AddItem.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddItem.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addItem(_ request: Hipstershop_AddItemRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_AddItemRequest, Hipstershop_Empty> {
    return self.makeUnaryCall(path: "/hipstershop.CartService/AddItem",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetCart.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCart.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCart(_ request: Hipstershop_GetCartRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_GetCartRequest, Hipstershop_Cart> {
    return self.makeUnaryCall(path: "/hipstershop.CartService/GetCart",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to EmptyCart.
  ///
  /// - Parameters:
  ///   - request: Request to send to EmptyCart.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func emptyCart(_ request: Hipstershop_EmptyCartRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_EmptyCartRequest, Hipstershop_Empty> {
    return self.makeUnaryCall(path: "/hipstershop.CartService/EmptyCart",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_RecommendationServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_RecommendationServiceService {
  func listRecommendations(_ request: Hipstershop_ListRecommendationsRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_ListRecommendationsRequest, Hipstershop_ListRecommendationsResponse>
}

public final class Hipstershop_RecommendationServiceServiceClient: GRPCClient, Hipstershop_RecommendationServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.RecommendationService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to ListRecommendations.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListRecommendations.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listRecommendations(_ request: Hipstershop_ListRecommendationsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_ListRecommendationsRequest, Hipstershop_ListRecommendationsResponse> {
    return self.makeUnaryCall(path: "/hipstershop.RecommendationService/ListRecommendations",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_ProductCatalogServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_ProductCatalogServiceService {
  func listProducts(_ request: Hipstershop_Empty, callOptions: CallOptions?) -> UnaryCall<Hipstershop_Empty, Hipstershop_ListProductsResponse>
  func getProduct(_ request: Hipstershop_GetProductRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_GetProductRequest, Hipstershop_Product>
  func searchProducts(_ request: Hipstershop_SearchProductsRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_SearchProductsRequest, Hipstershop_SearchProductsResponse>
}

public final class Hipstershop_ProductCatalogServiceServiceClient: GRPCClient, Hipstershop_ProductCatalogServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.ProductCatalogService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to ListProducts.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProducts.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProducts(_ request: Hipstershop_Empty, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_Empty, Hipstershop_ListProductsResponse> {
    return self.makeUnaryCall(path: "/hipstershop.ProductCatalogService/ListProducts",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetProduct.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProduct.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getProduct(_ request: Hipstershop_GetProductRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_GetProductRequest, Hipstershop_Product> {
    return self.makeUnaryCall(path: "/hipstershop.ProductCatalogService/GetProduct",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SearchProducts.
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchProducts.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchProducts(_ request: Hipstershop_SearchProductsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_SearchProductsRequest, Hipstershop_SearchProductsResponse> {
    return self.makeUnaryCall(path: "/hipstershop.ProductCatalogService/SearchProducts",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_ShippingServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_ShippingServiceService {
  func getQuote(_ request: Hipstershop_GetQuoteRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_GetQuoteRequest, Hipstershop_GetQuoteResponse>
  func shipOrder(_ request: Hipstershop_ShipOrderRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_ShipOrderRequest, Hipstershop_ShipOrderResponse>
}

public final class Hipstershop_ShippingServiceServiceClient: GRPCClient, Hipstershop_ShippingServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.ShippingService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GetQuote.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetQuote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getQuote(_ request: Hipstershop_GetQuoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_GetQuoteRequest, Hipstershop_GetQuoteResponse> {
    return self.makeUnaryCall(path: "/hipstershop.ShippingService/GetQuote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ShipOrder.
  ///
  /// - Parameters:
  ///   - request: Request to send to ShipOrder.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shipOrder(_ request: Hipstershop_ShipOrderRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_ShipOrderRequest, Hipstershop_ShipOrderResponse> {
    return self.makeUnaryCall(path: "/hipstershop.ShippingService/ShipOrder",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_CurrencyServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_CurrencyServiceService {
  func getSupportedCurrencies(_ request: Hipstershop_Empty, callOptions: CallOptions?) -> UnaryCall<Hipstershop_Empty, Hipstershop_GetSupportedCurrenciesResponse>
  func convert(_ request: Hipstershop_CurrencyConversionRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_CurrencyConversionRequest, Hipstershop_Money>
}

public final class Hipstershop_CurrencyServiceServiceClient: GRPCClient, Hipstershop_CurrencyServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.CurrencyService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GetSupportedCurrencies.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSupportedCurrencies.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSupportedCurrencies(_ request: Hipstershop_Empty, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_Empty, Hipstershop_GetSupportedCurrenciesResponse> {
    return self.makeUnaryCall(path: "/hipstershop.CurrencyService/GetSupportedCurrencies",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to Convert.
  ///
  /// - Parameters:
  ///   - request: Request to send to Convert.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func convert(_ request: Hipstershop_CurrencyConversionRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_CurrencyConversionRequest, Hipstershop_Money> {
    return self.makeUnaryCall(path: "/hipstershop.CurrencyService/Convert",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_PaymentServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_PaymentServiceService {
  func charge(_ request: Hipstershop_ChargeRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_ChargeRequest, Hipstershop_ChargeResponse>
}

public final class Hipstershop_PaymentServiceServiceClient: GRPCClient, Hipstershop_PaymentServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.PaymentService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to Charge.
  ///
  /// - Parameters:
  ///   - request: Request to send to Charge.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func charge(_ request: Hipstershop_ChargeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_ChargeRequest, Hipstershop_ChargeResponse> {
    return self.makeUnaryCall(path: "/hipstershop.PaymentService/Charge",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_EmailServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_EmailServiceService {
  func sendOrderConfirmation(_ request: Hipstershop_SendOrderConfirmationRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_SendOrderConfirmationRequest, Hipstershop_Empty>
}

public final class Hipstershop_EmailServiceServiceClient: GRPCClient, Hipstershop_EmailServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.EmailService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to SendOrderConfirmation.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendOrderConfirmation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendOrderConfirmation(_ request: Hipstershop_SendOrderConfirmationRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_SendOrderConfirmationRequest, Hipstershop_Empty> {
    return self.makeUnaryCall(path: "/hipstershop.EmailService/SendOrderConfirmation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_CheckoutServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_CheckoutServiceService {
  func placeOrder(_ request: Hipstershop_PlaceOrderRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_PlaceOrderRequest, Hipstershop_PlaceOrderResponse>
}

public final class Hipstershop_CheckoutServiceServiceClient: GRPCClient, Hipstershop_CheckoutServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.CheckoutService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to PlaceOrder.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlaceOrder.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func placeOrder(_ request: Hipstershop_PlaceOrderRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_PlaceOrderRequest, Hipstershop_PlaceOrderResponse> {
    return self.makeUnaryCall(path: "/hipstershop.CheckoutService/PlaceOrder",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Hipstershop_AdServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Hipstershop_AdServiceService {
  func getAds(_ request: Hipstershop_AdRequest, callOptions: CallOptions?) -> UnaryCall<Hipstershop_AdRequest, Hipstershop_AdResponse>
}

public final class Hipstershop_AdServiceServiceClient: GRPCClient, Hipstershop_AdServiceService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the hipstershop.AdService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GetAds.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAds.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAds(_ request: Hipstershop_AdRequest, callOptions: CallOptions? = nil) -> UnaryCall<Hipstershop_AdRequest, Hipstershop_AdResponse> {
    return self.makeUnaryCall(path: "/hipstershop.AdService/GetAds",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_CartServiceProvider: CallHandlerProvider {
  func addItem(request: Hipstershop_AddItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Empty>
  func getCart(request: Hipstershop_GetCartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Cart>
  func emptyCart(request: Hipstershop_EmptyCartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Empty>
}

extension Hipstershop_CartServiceProvider {
  public var serviceName: String { return "hipstershop.CartService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "AddItem":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addItem(request: request, context: context)
        }
      }

    case "GetCart":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCart(request: request, context: context)
        }
      }

    case "EmptyCart":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.emptyCart(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_RecommendationServiceProvider: CallHandlerProvider {
  func listRecommendations(request: Hipstershop_ListRecommendationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_ListRecommendationsResponse>
}

extension Hipstershop_RecommendationServiceProvider {
  public var serviceName: String { return "hipstershop.RecommendationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListRecommendations":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listRecommendations(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_ProductCatalogServiceProvider: CallHandlerProvider {
  func listProducts(request: Hipstershop_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_ListProductsResponse>
  func getProduct(request: Hipstershop_GetProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Product>
  func searchProducts(request: Hipstershop_SearchProductsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_SearchProductsResponse>
}

extension Hipstershop_ProductCatalogServiceProvider {
  public var serviceName: String { return "hipstershop.ProductCatalogService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListProducts":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listProducts(request: request, context: context)
        }
      }

    case "GetProduct":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getProduct(request: request, context: context)
        }
      }

    case "SearchProducts":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.searchProducts(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_ShippingServiceProvider: CallHandlerProvider {
  func getQuote(request: Hipstershop_GetQuoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_GetQuoteResponse>
  func shipOrder(request: Hipstershop_ShipOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_ShipOrderResponse>
}

extension Hipstershop_ShippingServiceProvider {
  public var serviceName: String { return "hipstershop.ShippingService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetQuote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getQuote(request: request, context: context)
        }
      }

    case "ShipOrder":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.shipOrder(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_CurrencyServiceProvider: CallHandlerProvider {
  func getSupportedCurrencies(request: Hipstershop_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_GetSupportedCurrenciesResponse>
  func convert(request: Hipstershop_CurrencyConversionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Money>
}

extension Hipstershop_CurrencyServiceProvider {
  public var serviceName: String { return "hipstershop.CurrencyService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetSupportedCurrencies":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSupportedCurrencies(request: request, context: context)
        }
      }

    case "Convert":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.convert(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_PaymentServiceProvider: CallHandlerProvider {
  func charge(request: Hipstershop_ChargeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_ChargeResponse>
}

extension Hipstershop_PaymentServiceProvider {
  public var serviceName: String { return "hipstershop.PaymentService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Charge":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.charge(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_EmailServiceProvider: CallHandlerProvider {
  func sendOrderConfirmation(request: Hipstershop_SendOrderConfirmationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_Empty>
}

extension Hipstershop_EmailServiceProvider {
  public var serviceName: String { return "hipstershop.EmailService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SendOrderConfirmation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendOrderConfirmation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_CheckoutServiceProvider: CallHandlerProvider {
  func placeOrder(request: Hipstershop_PlaceOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_PlaceOrderResponse>
}

extension Hipstershop_CheckoutServiceProvider {
  public var serviceName: String { return "hipstershop.CheckoutService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "PlaceOrder":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.placeOrder(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Hipstershop_AdServiceProvider: CallHandlerProvider {
  func getAds(request: Hipstershop_AdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hipstershop_AdResponse>
}

extension Hipstershop_AdServiceProvider {
  public var serviceName: String { return "hipstershop.AdService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetAds":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAds(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

